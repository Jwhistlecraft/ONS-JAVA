package MediaPlayer;

import java.io.File;

import javafx.application.Application;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Slider;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.util.Duration;

public class MoviePlayer extends Application {

	public static void main(String[] args) {
		launch(args);
	}

	@Override
	public void start(Stage stage) throws Exception {
		Group root = new Group();

		Media media = new Media(
				"file:///C:/Users/QAC/eclipse-workspace/Java-Day9/src/MediaPlayer/MovieTrailers/Toy_3.mp4"
				);
		MediaPlayer player = new MediaPlayer(media);
		MediaView view = new MediaView(player);
		
		final VBox vbox = new VBox();
		final Slider slider = new Slider();
		vbox.getChildren().add(slider);
		
		final HBox hbox = new HBox(2);
		final int bands = player.getAudioSpectrumNumBands();
		final Rectangle[] rects = new Rectangle[bands];
		for(int i=0; i <rects.length; i++) {
			rects[i] = new Rectangle();
			rects[i].setFill(Color.GREENYELLOW);
			hbox.getChildren().add(rects[i]);
		}
		vbox.getChildren().add(hbox);
		
		root.getChildren().add(view);
		root.getChildren().add(vbox);
		
		Scene scene = new Scene(root, 400, 400, Color.BLACK);
		stage.setScene(scene);
		stage.show();

		player.play();
		player.setOnReady(new Runnable() {
			public void run() {
				int w = player.getMedia().getWidth();
				int h = player.getMedia().getHeight();
				
				hbox.minWidth(w);
				int bandWidth = w/rects.length;
				for (Rectangle r:rects) {
					r.setWidth(bandWidth);
					r.setHeight(2);
					
				}
				
				stage.setMinWidth(w);
				stage.setMinHeight(h);
				
				vbox.setMinSize(w, 100);
				vbox.setTranslateY(h-100);
				
				slider.setMin(0.0);
				slider.setValue(0.0);
				slider.setMax(player.getTotalDuration().toSeconds());

			}
		});
		player.currentTimeProperty().addListener(new ChangeListener<Duration>() {

			public void changed(ObservableValue<? extends Duration> observableValue, Duration duration, Duration current) {
				slider.setValue(current.toSeconds());
				} 
		});
		slider.setOnMouseClicked(new EventHandler<MouseEvent>(){

			public void handle(MouseEvent mouseEvent) {
				player.seek(Duration.seconds(slider.getValue()));
			}
		});
		
		
}


}
